//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClientForWCFchat.WCFchat {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCFchat.IChatService", CallbackContract=typeof(ClientForWCFchat.WCFchat.IChatServiceCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface IChatService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Join", ReplyAction="http://tempuri.org/IChatService/JoinResponse")]
        bool Join(string ClientName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Join", ReplyAction="http://tempuri.org/IChatService/JoinResponse")]
        System.Threading.Tasks.Task<bool> JoinAsync(string ClientName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IChatService/Message")]
        void Message(string CurrentMessage);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IChatService/Message")]
        System.Threading.Tasks.Task MessageAsync(string CurrentMessage);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IChatService/SendMessageTo")]
        void SendMessageTo(string CurrentMessage, string ClientReceiver, string ClientSender);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IChatService/SendMessageTo")]
        System.Threading.Tasks.Task SendMessageToAsync(string CurrentMessage, string ClientReceiver, string ClientSender);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/IChatService/CloseConnection")]
        void CloseConnection(string ClientName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsTerminating=true, IsInitiating=false, Action="http://tempuri.org/IChatService/CloseConnection")]
        System.Threading.Tasks.Task CloseConnectionAsync(string ClientName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IChatService/GetListOfClientsInChat")]
        void GetListOfClientsInChat();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, IsInitiating=false, Action="http://tempuri.org/IChatService/GetListOfClientsInChat")]
        System.Threading.Tasks.Task GetListOfClientsInChatAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/AnotherClientJoin")]
        void AnotherClientJoin(string NewClientName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/AnotherClientLeft")]
        void AnotherClientLeft(string NewClientName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/ReceivePublicMessage")]
        void ReceivePublicMessage(string NewMessage);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/ReceivePrivateMessage")]
        void ReceivePrivateMessage(string NewMessage, string ClientSenderName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IChatService/ReceiveListOfClientsInChat")]
        void ReceiveListOfClientsInChat(string[] AllClients);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceChannel : ClientForWCFchat.WCFchat.IChatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatServiceClient : System.ServiceModel.DuplexClientBase<ClientForWCFchat.WCFchat.IChatService>, ClientForWCFchat.WCFchat.IChatService {
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public bool Join(string ClientName) {
            return base.Channel.Join(ClientName);
        }
        
        public System.Threading.Tasks.Task<bool> JoinAsync(string ClientName) {
            return base.Channel.JoinAsync(ClientName);
        }
        
        public void Message(string CurrentMessage) {
            base.Channel.Message(CurrentMessage);
        }
        
        public System.Threading.Tasks.Task MessageAsync(string CurrentMessage) {
            return base.Channel.MessageAsync(CurrentMessage);
        }
        
        public void SendMessageTo(string CurrentMessage, string ClientReceiver, string ClientSender) {
            base.Channel.SendMessageTo(CurrentMessage, ClientReceiver, ClientSender);
        }
        
        public System.Threading.Tasks.Task SendMessageToAsync(string CurrentMessage, string ClientReceiver, string ClientSender) {
            return base.Channel.SendMessageToAsync(CurrentMessage, ClientReceiver, ClientSender);
        }
        
        public void CloseConnection(string ClientName) {
            base.Channel.CloseConnection(ClientName);
        }
        
        public System.Threading.Tasks.Task CloseConnectionAsync(string ClientName) {
            return base.Channel.CloseConnectionAsync(ClientName);
        }
        
        public void GetListOfClientsInChat() {
            base.Channel.GetListOfClientsInChat();
        }
        
        public System.Threading.Tasks.Task GetListOfClientsInChatAsync() {
            return base.Channel.GetListOfClientsInChatAsync();
        }
    }
}
