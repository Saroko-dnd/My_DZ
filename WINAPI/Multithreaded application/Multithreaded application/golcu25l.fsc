#include "MultithreadDlg.h"
#include <string>
#include <ctime>
#include <fstream>
#include <vector>

using namespace std;

CMultithreadDlg* CMultithreadDlg::ptr = NULL;
HWND hList;
CRITICAL_SECTION our_section;
int counter_global = 0;
wstring buf_main, buf_main_2;
int first_time = 0, sec_time = 0;
ofstream fout("simple_numbers_3_threads.txt"), fout_2("simple_.txt"),fout_3("simple_ANOTHER.txt");
vector <int> main_buf_for_file, main_buf_for_file_copy;
vector <int> main_buf_for_file_2,main_buf_for_file_2_copy;
vector <int> single_thread_buf;
bool thread_1_swi = true;
bool thread_2_swi = true;
bool swi_counter_2 = false;
bool swi_counter_1 = false;


CMultithreadDlg::CMultithreadDlg(void)
{
	ptr = this;
}

CMultithreadDlg::~CMultithreadDlg(void)
{

}

void CMultithreadDlg::Cls_OnClose(HWND hwnd)
{
	EndDialog(hwnd, 0);
}

DWORD WINAPI Thread1(LPVOID lp)
{
	for (int counter = 0; counter < 100000; ++counter)
	{
		EnterCriticalSection(&our_section);
		//buf_main.resize(0);
		//buf_main = to_wstring(counter_global + L'+' + L'+');
		++counter_global;
		//SendMessage(hList, LB_ADDSTRING, 0, (LPARAM)buf_main.c_str());
		LeaveCriticalSection(&our_section);
	}
	//SendMessage(hList, LB_ADDSTRING, 0, LPARAM(TEXT("Первый поток завершает работу")));
	return 0;
}

DWORD WINAPI Thread2(LPVOID lp)
{
	for (int counter = 0; counter < 100000; ++counter)
	{
		EnterCriticalSection(&our_section);
		//buf_main.resize(0);
		//buf_main = to_wstring(counter_global + L'-' + L'-');
		--counter_global;
		//SendMessage(hList, LB_ADDSTRING, 0, (LPARAM)buf_main.c_str());
		LeaveCriticalSection(&our_section);
	}
	//SendMessage(hList, LB_ADDSTRING, 0, LPARAM(TEXT("Второй поток завершает работу")));
	return 0;
}

DWORD WINAPI Thread3(LPVOID lp)
{

	for (int c = 3; c < 100000; c += 4)
	{
		bool f = true;
		for (int d = 3; d*d <= c; d += 2)
		{
			if (c % d == 0)
			{
				f = false;
				break;
			}
		}
		if (f)
		{
			main_buf_for_file.push_back(c);
		}
	}
	thread_1_swi = false;
	return 0;
}

DWORD WINAPI Thread4(LPVOID lp)
{
	for (int c = 5; c < 100000; c += 4)
	{
		bool f = true;
		for (int d = 3; d*d <= c; d += 2)
		{
			if (c % d == 0)
			{
				f = false;
				break;
			}
		}
		if (f)
		{
			main_buf_for_file_2.push_back(c);
		}
	}
	thread_2_swi = false;
	return 0;
}

DWORD WINAPI Thread5(LPVOID lp)
{
	single_thread_buf.resize(0);
	for (int c = 3; c < 100000; c += 2)
	{
		bool f = true;
		for (int d = 3; d*d <= c; d += 2)
		{
			if (c % d == 0)
			{
				f = false;
				break;
			}
		}
		if (f)
		{
			single_thread_buf.push_back(c);
		}
	}
	for (auto p : single_thread_buf)
	{
		fout_3 << p << "\n";
	}
	fout_2.close();
	return 0;
}

DWORD WINAPI Thread_main(LPVOID lp)
{
	int count = (int)lp;
	if (count == 0)
	{
		for (int i = 0; i < 15; i++)
		{
			SendMessage(hList, LB_ADDSTRING, 0, LPARAM(TEXT("Работает первый поток")));
			Sleep(10);
		}
		SendMessage(hList, LB_ADDSTRING, 0, LPARAM(TEXT("Первый поток завершает работу")));
	}
	else if (count == 1)
	{
		for (int i = 0; i < 20; i++)
		{
			SendMessage(hList, LB_ADDSTRING, 0, LPARAM(TEXT("Работает второй поток")));
			Sleep(10);
		}
		SendMessage(hList, LB_ADDSTRING, 0, LPARAM(TEXT("Второй поток завершает работу")));
	}
	else if (count == 2)
	{
		for (int i = 0; i < 10; i++)
		{
			SendMessage(hList, LB_ADDSTRING, 0, LPARAM(TEXT("Работает третий поток")));
			Sleep(10);
		}
		SendMessage(hList, LB_ADDSTRING, 0, LPARAM(TEXT("Третий поток завершает работу")));
	}
	return 0;
}

DWORD WINAPI Thread_file(LPVOID lp)
{
	int counter = 0,counter_2 = 0;
	while (true)
	{
		if (!thread_1_swi && counter == main_buf_for_file.size())
			swi_counter_1 = true;
		if (!thread_2_swi && counter_2 == main_buf_for_file_2.size())
			swi_counter_2 = true;
		if (thread_2_swi && thread_1_swi && main_buf_for_file_2.size() > counter_2 + 1 &&
			main_buf_for_file.size() > counter + 1)
		{
				if (main_buf_for_file[counter] > main_buf_for_file_2[counter_2])
				{
					fout << main_buf_for_file_2[counter_2] << "\n";
						++counter_2;
				}
				else
				{
					fout << main_buf_for_file[counter] << "\n";
						++counter;
				}
		}
		else if (!thread_2_swi && !thread_1_swi)
		{
			while (counter_2 < main_buf_for_file_2.size() || counter < main_buf_for_file.size())
			{
				if (counter_2 < main_buf_for_file_2.size() && counter < main_buf_for_file.size())
				{
					if (main_buf_for_file[counter] > main_buf_for_file_2[counter_2])
					{
						fout << main_buf_for_file_2[counter_2] << "\n";
						++counter_2;
					}
					else
					{
						fout << main_buf_for_file[counter] << "\n";
						++counter;
					}
				}
				else if (counter_2 < main_buf_for_file_2.size())
				{
					fout << main_buf_for_file_2[counter_2] << "\n";
					++counter_2;
				}
				else if (counter < main_buf_for_file.size())
				{
					fout << main_buf_for_file[counter] << "\n";
					++counter;
				}
			}
		}
		if (swi_counter_2 && swi_counter_1)
		{
			fout.close();
			break;
		}
	}
	return 0;
}

BOOL CMultithreadDlg::Cls_OnInitDialog(HWND hwnd, HWND hwndFocus, LPARAM lParam) 
{
	hList = GetDlgItem(hwnd, IDC_LIST1);
	InitializeCriticalSection(&our_section);

	sec_time = clock(); // начальное время
	HANDLE th1 = CreateThread(NULL, 0, Thread3, (LPVOID)0, 0, NULL);
	HANDLE th2 = CreateThread(NULL, 0, Thread4, (LPVOID)1, 0, NULL);
	HANDLE th3 = CreateThread(NULL, 0, Thread_file, (LPVOID)1, 0, NULL);

	WaitForSingleObject(th1, INFINITE);
	WaitForSingleObject(th2, INFINITE);
	WaitForSingleObject(th3, INFINITE);

	unsigned int end_time_2 = clock(); // конечное время
	sec_time = end_time_2 - sec_time; // искомое время

	SendMessage(hList, LB_ADDSTRING, 0, (LPARAM)(to_wstring(sec_time).c_str()));

	sec_time = clock(); // начальное время
	fout_2.clear();
	Thread5(0);

	end_time_2 = clock(); // конечное время
	sec_time = end_time_2 - sec_time; // искомое время

	SendMessage(hList, LB_ADDSTRING, 0, (LPARAM)(to_wstring(sec_time).c_str()));
	fout_3.close();
	//sec_time = clock(); // начальное время
	//HANDLE th3 = CreateThread(NULL, 0, Thread5, (LPVOID)0, 0, NULL);

	//WaitForSingleObject(th3, INFINITE);

	//end_time_2 = clock(); // конечное время
	//sec_time = end_time_2 - sec_time; // искомое время

	//SendMessage(hList, LB_ADDSTRING, 0, (LPARAM)(to_wstring(sec_time).c_str()));
	//CreateThread(NULL, 0, Thread_main, (LPVOID)2, 0, NULL);
	return TRUE;
}

BOOL CALLBACK CMultithreadDlg::DlgProc(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	switch(message)
	{
		HANDLE_MSG(hwnd, WM_CLOSE, ptr->Cls_OnClose);
		HANDLE_MSG(hwnd, WM_INITDIALOG, ptr->Cls_OnInitDialog);
	}
	return FALSE;
}